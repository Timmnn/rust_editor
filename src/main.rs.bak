use crossterm::{
    cursor,
    event::{self, Event, KeyCode, KeyEvent, KeyEventKind},
    execute,
    terminal::{self, disable_raw_mode, enable_raw_mode, Clear, ClearType},
};
use std::io::{stdout, Write};
use std::{error::Error, fs::File};

use crossterm::{
    style::{Attribute, SetAttribute}, // Add this import
};

struct Editor {
    buffer: String,
    cursor_x: u16,
    cursor_y: u16,
    logfile: File,
}

impl Editor {
    fn new() -> Self {
        Self {
            buffer: String::new(),
            cursor_x: 0,
            cursor_y: 0,
            logfile: File::create("editor_log.txt").unwrap(),
        }
    }

    fn run(&mut self) -> std::io::Result<()> {
        let mut stdout = stdout();

        // Setup terminal
        enable_raw_mode()?;
        execute!(
            stdout,
            Clear(ClearType::All),
            cursor::MoveTo(0, 0),
            cursor::Show
        )?;

        self.draw_screen_old();

        // Main event loop
        loop {
            if event::poll(std::time::Duration::from_millis(100))? {
                if let Event::Key(key_event) = event::read()? {
                    if key_event.kind == KeyEventKind::Press {
                        if !self.process_keypress(key_event.code) {
                            break;
                        }
                        self.draw_screen_old();
                    }
                }
            }
        }

        // Cleanup
        disable_raw_mode()?;
        execute!(stdout, Clear(ClearType::All), cursor::MoveTo(0, 0))?;

        Ok(())
    }

    fn process_keypress(&mut self, key: KeyCode) -> bool {
        match key {
            KeyCode::Char('q') if self.buffer.is_empty() => return false,
            KeyCode::Char(c) => {
                self.insert_char(c);
            }
            KeyCode::Enter => {
                self.insert_newline();
            }
            KeyCode::Backspace => {
                self.delete_char();
            }
            KeyCode::Left => {
                if self.cursor_x > 0 {
                    self.cursor_x -= 1;
                }
            }
            KeyCode::Right => {
                self.cursor_x += 1;
            }
            KeyCode::Up => {
                if self.cursor_y > 0 {
                    self.cursor_y -= 1;
                }
            }
            KeyCode::Down => {
                self.cursor_y += 1;
            }
            _ => {}
        }
        true
    }

    fn insert_char(&mut self, c: char) {
        let index = self.get_buffer_index();
        self.buffer.insert(index, c);
        self.cursor_x += 1;
        self.log_change();
    }

    fn insert_newline(&mut self) {
        let index = self.get_buffer_index();
        self.buffer.insert(index, '\n');
        self.cursor_x = 0;
        self.cursor_y += 1;
        self.log_change();
    }

    fn delete_char(&mut self) {
        let index = self.get_buffer_index();
        if index > 0 {
            self.buffer.remove(index - 1);
            if self.cursor_x > 0 {
                self.cursor_x -= 1;
            } else if self.cursor_y > 0 {
                self.cursor_y -= 1;
                // Set cursor_x to end of previous line
                self.cursor_x = self.get_line_length(self.cursor_y) as u16;
            }
            self.log_change();
        }
    }

    fn get_buffer_index(&self) -> usize {
        let mut index = 0;
        let mut current_y = 0;

        for (i, c) in self.buffer.chars().enumerate() {
            if current_y == self.cursor_y {
                if index >= self.cursor_x as usize {
                    return i;
                }
                index += 1;
            }
            if c == '\n' {
                current_y += 1;
                index = 0;
            } else {
                index += 1;
            }
        }

        self.buffer.len()
    }

    fn get_line_length(&self, line_number: u16) -> usize {
        let mut current_line = 0;
        let mut length = 0;

        for c in self.buffer.chars() {
            if current_line == line_number {
                if c == '\n' {
                    break;
                }
                length += 1;
            } else if c == '\n' {
                current_line += 1;
            }
        }

        length
    }

    fn draw_screen_old(&mut self) {
        let mut stdout = stdout();
        execute!(stdout, Clear(ClearType::All), cursor::MoveTo(0, 0)).unwrap();

        // Draw status line
        execute!(
            stdout,
            cursor::MoveTo(0, 0),
            SetAttribute(Attribute::Reverse)
        )
        .unwrap();
        println!("Editor -- Press 'q' to quit when buffer is empty");
        execute!(stdout, SetAttribute(Attribute::Reset));

        // Draw buffer content
        print!("{}", self.buffer);
        stdout.flush().unwrap();

        // Position cursor
        execute!(
            stdout,
            cursor::MoveTo(self.cursor_x, self.cursor_y + 1) // +1 for status line
        )
        .unwrap();

        ()
    }

    fn draw_screen(&mut self) {
        let mut stdout = stdout();

        // Move cursor to start instead of clearing the whole screen
        execute!(stdout, cursor::MoveTo(0, 0)).unwrap();

        // Draw status line
        execute!(stdout, SetAttribute(Attribute::Reverse)).unwrap();
        print!("Editor -- Press 'q' to quit when buffer is empty");
        execute!(stdout, SetAttribute(Attribute::Reset)).unwrap();

        // Move cursor down to start of buffer
        execute!(stdout, cursor::MoveTo(0, 1)).unwrap();

        execute!(stdout,);

        // Only update changed content
        for (i, line) in self.buffer.lines().enumerate() {
            execute!(stdout, cursor::MoveTo(0, (i + 1) as u16)).unwrap();
            print!("{}", line);
        }

        // Position cursor
        execute!(stdout, cursor::MoveTo(self.cursor_x, self.cursor_y + 1)).unwrap();

        stdout.flush().unwrap();
    }

    fn log_change(&mut self) {
        writeln!(self.logfile, "{}", self.buffer).unwrap();
    }
}

fn main() {
    let mut editor = Editor::new();
    editor.run().unwrap();
}
